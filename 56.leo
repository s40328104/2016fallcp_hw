<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160921213353.1"><vh>2016fall 簡報與網誌樣板系統</vh></v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button pelican-blog</vh></v>
</v>
<v t="amd.20151215180106.1" a="E"><vh>設定與開發</vh>
<v t="amd.20151216151325.1" a="E"><vh>@clean index.html</vh>
<v t="amd.20161004083800.1" a="E"><vh>html</vh>
<v t="amd.20161004083800.2"><vh>head</vh></v>
<v t="amd.20161004083800.5" a="E"><vh>body</vh>
<v t="amd.20161004083800.6" a="E"><vh>reveal div</vh>
<v t="amd.20161004083800.7" a="E"><vh>slides div</vh>
<v t="amd.20161004095719.1" a="E"><vh>封面投影片</vh>
<v t="amd.20161004095719.2"><vh>封面投影片內容</vh></v>
</v>
<v t="yen.20161016023122.1" a="E"><vh>快捷鍵</vh>
<v t="yen.20161016023122.2"><vh>投影片快捷鍵</vh></v>
</v>
<v t="amd.20161004104820.1"><vh>三大主題教學</vh>
<v t="amd.20161004104641.1" a="E"><vh>主題教學</vh>
<v t="amd.20161004104641.2"><vh>計算機程式在教什麼?</vh></v>
</v>
<v t="yen.20161011155543.1" a="E"><vh>主題教學內容</vh>
<v t="yen.20161011155543.2"><vh>計算機程式在教什麼?</vh></v>
</v>
<v t="yen.20161011115740.1" a="E"><vh>相關課程</vh>
<v t="yen.20161011115740.2"><vh>計算機程式系列課程</vh></v>
</v>
<v t="amd.20161004105131.1" a="E"><vh>創造力</vh>
<v t="amd.20161004105131.2"><vh>何謂創造力?</vh></v>
</v>
<v t="yen.20161011114704.1" a="E"><vh>創造力</vh>
<v t="yen.20161011114704.2"><vh>何謂創造力?</vh></v>
</v>
<v t="yen.20161011121637.1"><vh>所謂自學</vh>
<v t="yen.20161011121637.2"><vh>自學的訓練</vh></v>
</v>
<v t="amd.20161004105716.1"><vh>執行力</vh>
<v t="amd.20161004105716.2"><vh>高效執行力</vh></v>
</v>
</v>
<v t="yen.20161016004633.1"><vh>CP 課程倉儲</vh>
<v t="yen.20161016004633.4"><vh>課程時段與規劃</vh>
<v t="yen.20161016004633.5"><vh>規劃、Wiki 與網誌</vh></v>
</v>
<v t="yen.20161016010643.1"><vh>下載 miniconda 可攜環境</vh>
<v t="yen.20161016010643.2"><vh>下載可攜程式環境</vh></v>
</v>
<v t="yen.20161016010719.1" a="E"><vh>學員自評項目</vh>
<v t="yen.20161016012922.1"><vh>下載可攜程式環境</vh></v>
</v>
</v>
<v t="yen.20161011122932.1"><vh>自學力訓練</vh>
<v t="yen.20161011122601.1" a="E"><vh>自學的材料</vh>
<v t="yen.20161011122601.2"><vh>自學 Python3</vh></v>
</v>
<v t="yen.20161011122957.1" a="E"><vh>Python 執行環境</vh>
<v t="yen.20161011122957.2"><vh>在哪裡執行?</vh></v>
</v>
<v t="yen.20161011123951.1" a="E"><vh>Python 解譯器</vh>
<v t="yen.20161011123951.2"><vh>Python 解譯器</vh></v>
</v>
<v t="yen.20161011124118.1" a="E"><vh>Python 版次</vh>
<v t="yen.20161011124118.2"><vh>Python 2 或 3?</vh></v>
</v>
</v>
<v t="yen.20161011125115.1"><vh>執行力訓練</vh>
<v t="yen.20161016011920.1" a="E"><vh>程式練習主題</vh>
<v t="yen.20161016011920.2"><vh>程式專題</vh></v>
</v>
<v t="yen.20161011125115.2" a="E"><vh>如何進行上課分組與排座位</vh>
<v t="yen.20161011125115.3"><vh>課程分組排座位</vh></v>
</v>
<v t="yen.20161016012215.1" a="E"><vh>如何寫一個猜數字遊戲?</vh>
<v t="yen.20161016012215.2"><vh>猜數字遊戲</vh></v>
</v>
<v t="yen.20161016012253.1" a="E"><vh>如何繪製 2D 靜態圖?</vh>
<v t="yen.20161016012253.2"><vh>2D 繪圖</vh></v>
</v>
<v t="yen.20161016012402.1" a="E"><vh>如何製作一個簡單的網際遊戲?</vh>
<v t="yen.20161016012402.2"><vh>網際遊戲</vh></v>
</v>
</v>
<v t="yen.20161011143808.1"><vh>協同力訓練</vh>
<v t="yen.20161011143808.2" a="E"><vh>Github 帳號</vh>
<v t="yen.20161011143808.3"><vh>Github 倉儲網頁</vh></v>
</v>
<v t="yen.20161011144113.1"><vh>倉儲子模組串連</vh>
<v t="yen.20161011144113.2"><vh>學員作業網頁定版</vh></v>
</v>
<v t="yen.20161011144715.1"><vh>倉儲版本拉回請求</vh>
<v t="yen.20161011144715.2"><vh>Github 倉儲拉回請求</vh></v>
</v>
</v>
<v t="yen.20161011145156.1"><vh>開始學 Python</vh>
<v t="yen.20161011145156.2" a="E"><vh>Python 基本語法</vh>
<v t="yen.20161011145156.3"><vh>Python3 語法</vh></v>
</v>
<v t="yen.20161011145156.4" a="E"><vh>Python 迴圈</vh>
<v t="yen.20161011145156.5"><vh>for 迴圈用法</vh></v>
</v>
<v t="yen.20161011145156.6"><vh>Python 函式</vh>
<v t="yen.20161011145156.7"><vh>函式用法</vh></v>
</v>
<v t="yen.20161011145755.1"><vh>Python 數列</vh>
<v t="yen.20161011145755.2"><vh>數列用法</vh></v>
</v>
<v t="yen.20161011145952.1"><vh>分組程式</vh>
<v t="yen.20161011145952.2"><vh>分組程式內容</vh></v>
</v>
<v t="yen.20161011150316.1"><vh>猜數字遊戲</vh>
<v t="yen.20161011150316.2"><vh>遊戲邏輯</vh></v>
</v>
<v t="yen.20161011150126.1"><vh>2 D 繪圖</vh>
<v t="yen.20161011150126.2"><vh>Python 網際繪圖</vh></v>
</v>
<v t="yen.20161011150901.1"><vh>2 D 動畫</vh>
<v t="yen.20161011150901.2"><vh>網際動畫範例</vh></v>
</v>
</v>
<v t="yen.20161016012809.1"><vh>各式內容引用範例</vh>
<v t="yen.20161016012809.2" a="E"><vh>導入數學符號與方程式</vh>
<v t="yen.20161016012809.3"><vh>LaTeX 格式方程式</vh></v>
</v>
<v t="yen.20161016012809.4" a="E"><vh>導入縮排程式碼</vh>
<v t="yen.20161016012809.5"><vh>引用程式碼</vh></v>
</v>
<v t="yen.20161016012809.6" a="E"><vh>導入影片</vh>
<v t="yen.20161016012809.7"><vh>iframe 導入影片</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="leo.20151213230723.1"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>yen 所寫的網誌文章</vh>
<v t="amd.20160727114506.1" a="E"><vh>201609</vh>
<v t="amd.20160727120222.1"><vh>@edit 20160921.md</vh></v>
<v t="leo.20161014142409.1"><vh>@edit 20161014.md</vh></v>
<v t="leo.20161024160947.1"><vh>@edit 20161024.md</vh></v>
<v t="leo.20161031141956.1"><vh>@edit 20161031.md</vh></v>
<v t="leo.20161121152952.1"><vh>@edit 20161114.md</vh></v>
<v t="leo.20161121142432.1"><vh>@edit 20161121.md</vh></v>
<v t="leo.20161127182659.1" a="M"><vh>@edit 20161127.md</vh></v>
</v>
</v>
</v>
<v t="amd.20160106094754.1"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>yen 所寫的 pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="amd.20161004202833.1"><vh>@edit ../README.md</vh></v>
<v t="yen.20161022111056.1"><vh>@button https server</vh></v>
<v t="yen.20161022151749.1"><vh>產生 .key 與 .crt</vh></v>
</vnodes>
<tnodes>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題 (請注意各文章的標題不可相同, 比較保險的作法是冠上四個學號尾碼)
Date: 2016-09-2 12:00
Category: 類別
Tags: 標籤
Author: yen

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容

程式碼

&lt;pre class="brush: python;"&gt;
print("hello")
&lt;/pre&gt;</t>
<t tx="amd.20151216151325.1">@language xml
@tabwidth -4
@others

</t>
<t tx="amd.20160106093454.1"></t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160727114506.1"></t>
<t tx="amd.20160727120222.1">@language md
Title: 2016Fall 機械設計主題教學
Date: 2016-09-2 12:00
Category: Misc
Tags: 使用導引, 創造力, 表達能力, 協同設計
Author: yen

知識管理與最佳化應用實驗室試圖利用計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習等課程, 進行與機械設計相關的主題式教學, 其中包含強化創造力的教學、令學員熟習六種工程表達方式, 並且俱備融入協同設計所需要的四大面向知識與技能.

&lt;!-- PELICAN_END_SUMMARY --&gt;

# 機械設計主題教學

創造力三元素, 機械設計的六種表達, 協同設計的四大面向.

1. 強化創造能力 - 自學力、程式力與想像力
(Creative Competencies)
2. 熟習六種表達  - 口語、文字、2D、3D、理論與實體表達
(Six Presentation Methods)
3. 融入協同設計 - 電腦、網路、軟硬體工具與協同專案
(Collaborative Designs)

# 計算機程式

從 Python3 的 print(), input(), 變數命名到關鍵字, 可以透過簡單的單位轉換問題進行練習:

首先我們舉 Python3 程式執行的三個地方:

1. 在單機 Windows 10 操作系統環境下利用可攜程式系統執行
2. 利用遠端桌面或 X-Windows, 在近端利用遠端的電腦硬體與操作系統執行
3. 在近端利用瀏覽器執行

1. 單機執行:

按下  start.bat 後, 系統就會配置好 git 與 Python3 的程式環境, 可以在命令列中直接用互動的方式執行 Python3 程式, 也可以在 SciTE 編輯器中, 透過設定按下 go 之後執行

所牽涉的問題:

可攜程式環境如何建立? Python3 執行環境如何配置? 執行的 Python3 是那一個版本?

希望在 SciTE 中直接執行 Python3 程式, 該如何設定?

能不能在 Leo Editor 中執行 Python3 程式, 為何要這樣做?

2. 近端連到遠端執行:

以 Remote Desktop, 連接到遠端的電腦畫面中執行可攜程式系統中的 Python3 程式, 基本架構與流程與近端單機執行相同.

利用 putty 與 Xming, 連線到支援 X-Windows 協定的電腦, 將遠端的視窗搬到近端執行, 但仍使用遠端電腦的硬體與軟體支援.

3. 在瀏覽器中執行:

由於網際瀏覽器環境所整合的工具愈來愈多, 就連原本只能在單機執行的 SolidWorks, 也已經有初步成型的 OnShape 可以取代部份的零組件設計分析工作, 因此本課程以 Brython 為例, 說明如何在瀏覽器中執行 Python3 程式.

所牽涉問題:

如何設置? &lt;a href="https://www.brython.info/tests/console.html?lang=en"&gt;Brython Console&lt;/a&gt;

所有近端能執行的程式都能利用瀏覽器執行?

以下使用 Brython 標準程式庫執行 Python3 繪圖程式:

&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;
&lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &gt;= width or (x[i]-r) &lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &gt; width):
        x[i] = width-r
    elif ((x[i]-r) &lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()
    ctx.closePath()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&lt;/script&gt;

上面小球自由落體的繪圖程式:

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="plotarea" width="600" height="400"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &amp;lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &amp;gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &amp;gt;= width or (x[i]-r) &amp;lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &amp;gt; width):
        x[i] = width-r
    elif ((x[i]-r) &amp;lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()
    ctx.closePath()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

繪製日本國旗:

步驟1, 先能畫一條線:

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag1" width="600" height="250"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;!-- 以下實際利用  Brython 畫一條直線 --&gt;
&lt;canvas id="japanflag1" width="600" height="250"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

接著畫四條直線:

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag2" width="600" height="400"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()
     
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag2" width="600" height="350"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()
     
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
&lt;/script&gt;

接著在四條直線中央畫一個圓:

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag3" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
from browser import document
import math
 
# 準備繪圖畫布
canvas = document["japanflag3"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()
     
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
 
# 以下要在框線中央畫一個圓, 設半徑為 80
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2

ctx.beginPath()
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, True)
# 設線顏色為紅色
ctx.strokeStyle = 'rgb(255, 0, 0)'
ctx.stroke()
# 填色設為紅色
ctx.fillStyle = 'rgb(255, 0, 0)'
ctx.fill()
ctx.closePath()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag3" width="650" height="450"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
from browser import document
import math
 
# 準備繪圖畫布
canvas = document["japanflag3"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()
     
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
 
# 以下要在框線中央畫一個圓, 設半徑為 80
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2

ctx.beginPath()
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, True)
# 設線顏色為紅色
ctx.strokeStyle = 'rgb(255, 0, 0)'
ctx.stroke()
# 填色設為紅色
ctx.fillStyle = 'rgb(255, 0, 0)'
ctx.fill()
ctx.closePath()
&lt;/script&gt;

然後將各繪圖模組寫成函式:

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag4" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["japanflag4"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(ctx, x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

     
# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(ctx, x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(ctx, x, y, w*3/2+x, y)
    draw_line(ctx, x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(ctx, x, y, x, w+y)
    draw_line(ctx, w*3/2+x, y, w*3/2+x, w+y)
 
def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()
    ctx.closePath()
     
# 呼叫 draw_frame()
width = 400
draw_frame(ctx, 10, 10, width)
# 計算框的中心點座標
x_center = 10 + width*3/2/2
y_center = 10 + width/2
# 中間圓的直徑為寬的 3/5
radius = width*3/5/2
draw_circle(x_center, y_center, radius)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag4" width="650" height="450"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["japanflag4"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(ctx, x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

     
# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(ctx, x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(ctx, x, y, w*3/2+x, y)
    draw_line(ctx, x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(ctx, x, y, x, w+y)
    draw_line(ctx, w*3/2+x, y, w*3/2+x, w+y)
 
def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()
    ctx.closePath()
     
# 呼叫 draw_frame()
width = 400
draw_frame(ctx, 10, 10, width)
# 計算框的中心點座標
x_center = 10 + width*3/2/2
y_center = 10 + width/2
# 中間圓的直徑為寬的 3/5
radius = width*3/5/2
draw_circle(x_center, y_center, radius)
&lt;/script&gt;

接下來畫中華民國國旗:

&lt;canvas id="rocflag" width="650" height="450"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["rocflag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="rocflag" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["rocflag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
</t>
<t tx="amd.20160921213353.1"></t>
<t tx="amd.20161004083800.1">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="amd.20161004083800.2">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;    
2016 Fall 計算機程式課程
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="amd.20161004083800.5">&lt;body&gt;
@others
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/head.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/js/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/zoom-js/zoom.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/notes/notes.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/math/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="amd.20161004083800.6">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004083800.7">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004095719.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004095719.2"># 2016Fall 計算機程式課程

### 虎科大機械設計工程系

&lt;small&gt;
Created by [40223234](https://s40223234.github.io/)
&lt;/small&gt;

[s40223234課程網誌](blog/index.html)
</t>
<t tx="amd.20161004104641.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004104641.2"># 計算機程式在教什麼?

## 創造力
## 表達力
以及
## 協同力

</t>
<t tx="amd.20161004104820.1">&lt;section&gt;
@others
&lt;/section&gt;
</t>
<t tx="amd.20161004105131.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004105131.2"># 何謂創造力?

## 能夠&lt;small&gt;&lt;span style="color:#FF0080"&gt;持續&lt;/span&gt;&lt;/small&gt;&lt;span style="color:#FFFF00"&gt;自學&lt;/span&gt;
## 會安排&lt;small&gt;&lt;span style="color:#FF0080"&gt;高效&lt;/span&gt;&lt;/small&gt;&lt;span style="color:#FFFF00"&gt;可執行&lt;/span&gt;流程
&lt;span style="color:#00FF80"&gt;還有&lt;/span&gt;
## 俱備&lt;small&gt;&lt;span style="color:#FF0080"&gt;豐富&lt;/span&gt;&lt;/small&gt;&lt;span style="color:#FFFF00"&gt;想像力&lt;/span&gt;

</t>
<t tx="amd.20161004105716.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004105716.2"># 高效執行力

## 用對的方法
## 在對的時機
## 找對的人
## 作對的事


</t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
<t tx="leo.20161031141956.1">@language md
Title: 2016Fall 程式練習題-123456
Date: 2016-10-31 12:00
Category: Misc
Tags: 使用導引
Author: yen

1234已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?

&lt;!-- PELICAN_END_SUMMARY --&gt;</t>
<t tx="leo.20161121142432.1">@language md
Title: W11 Brython 繪圖範
Date: 2016-11-21 14:48
Category : Course
Tags: Brython
Author: 40328104

Button 繪圖

&lt;!-- PELICAN_END_SUMMARY --&gt;

繪圖流程
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="japanflag1" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 畫右上左下的斜線
ctx.moveTo(150, 100)
ctx.lineTo(100, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫上下垂直線 --&gt;

&lt;canvas id="japanflag2" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1

for i in range(5):
    ctx.moveTo(100+i*10, 100)
    ctx.lineTo(100+i*10, 200)

# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫方格線 --&gt;

&lt;canvas id="japanflag3" width="600" height="300"&gt;&lt;/canvas&gt;

&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
import re
# 準備繪圖畫布
canvas = doc["japanflag3"]
container = doc["container3"]
ctx = canvas.getContext("2d")
# 以下可以利用 ctx 物件進行畫圖

# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 1 與 A7
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.font = "30px Arial"
ctx.fillText("D Major", 100, 70)
ctx.arc(160, 145, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("1", 155, 150)
ctx.fill()
ctx.stroke()
ctx.closePath()

# 3
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(180, 160, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("2", 175, 165)
ctx.fill()
ctx.stroke()
ctx.closePath()

# 4
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(200, 145, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("3", 195, 150)
ctx.fill()
ctx.stroke()
ctx.closePath()

# o
ctx.beginPath()
ctx.arc(140, 85, 7, 0, 2*math.pi, False)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()

# x
ctx.beginPath()
#ctx.arc(100, 85, 7, 0, 2*math.pi, False)
ctx.moveTo(94, 79)
ctx.lineTo(106, 91)
ctx.moveTo(106, 79)
ctx.lineTo(94, 91)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()

# x
ctx.beginPath()
#ctx.arc(120, 85, 7, 0, 2*math.pi, False)
ctx.moveTo(114, 79)
ctx.lineTo(126, 91)
ctx.moveTo(126, 79)
ctx.lineTo(114, 91)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()

'''
# 以下將 canvas 畫布內容轉為 img tag, 並且顯示在 container 物件
img = canvas.toDataURL("image/png")
# 利用 re.sub, 將原本要直接開圖檔的 data:image 標頭, 改為 data:application/octet-stream, 可直接下載存檔
# 使用 re 模組之前必須先 import re
img = re.sub("^data:image\/[^;]", "data:application/octet-stream", img)
# 宣告 anchor markup attribute download, 可以指定下載儲存檔名
container &lt;= html.A("save image", href=img, download="guitar_chord.png")
'''
&lt;/script&gt;
</t>
<t tx="leo.20161121152952.1">@language md
Title: W10 Brython 繪圖範例
Date: 2016-11-21 14:48
Category : Course
Tags: Brython
Author: 40328104

Button 繪圖

&lt;!-- PELICAN_END_SUMMARY --&gt;

繪圖流程

&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫一條直線 --&gt;
&lt;canvas id="japanflag1" width="600" height="250"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")
 
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
# 實際執行畫線
ctx.moveTo(100, 200)
ctx.lineTo(150, 100)
ctx.strokeStyle = "blue"
ctx.stroke()
ctx.closePath()
&lt;/script&gt;</t>
<t tx="leo.20161127182659.1">@language md
Title:  Brython 繪圖範例
Date: 2016-11-27 18:31
Category : Course
Tags: Brython
Author: 40328104

Button 繪圖

&lt;!-- PELICAN_END_SUMMARY --&gt;

繪圖流程
&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")
 
# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
 
# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
ctx.closePath()
&lt;/script&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")
 
def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
 
    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()
 
background(300, 300, 10, 10, 5, 4, ctx)
background(100, 300, 10, 10, 5, 4, ctx)
background(300, 100, 10, 10, 5, 12, ctx)
&lt;/script&gt;</t>
<t tx="yen.20161011114704.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011114704.2"># 何謂創造力?

## 能夠&lt;small&gt;&lt;span style="color:#FF0080"&gt;持續&lt;/span&gt;&lt;/small&gt;自學-&gt;&lt;span style="color:#FFFF00"&gt;不一定都要別人教&lt;/span&gt;
## 會安排&lt;small&gt;&lt;span style="color:#FF0080"&gt;高效&lt;/span&gt;&lt;/small&gt;可執行流程-&gt;展現&lt;span style="color:#FFFF00"&gt;執行力&lt;/span&gt;
&lt;span style="color:#00FF80"&gt;還有&lt;/span&gt;
## 俱備&lt;small&gt;&lt;span style="color:#FF0080"&gt;豐富&lt;/span&gt;&lt;/small&gt;想像力-&gt;不受限, &lt;span style="color:#FFFF00"&gt;積極進行改造&lt;/span&gt;

</t>
<t tx="yen.20161011115740.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011115740.2"># 計算機程式系列課程

## 網際內容管理
## 電腦輔助設計實習
&lt;span style="color:#00FF80"&gt;還有&lt;/span&gt;
## 協同產品設計實習
也在研習&lt;span style="color:#FFFF00"&gt;創造力&lt;/span&gt;、&lt;span style="color:#FFFF00"&gt;表達力&lt;/span&gt;與&lt;span style="color:#FFFF00"&gt;協同力&lt;/span&gt;

</t>
<t tx="yen.20161011121637.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011121637.2"># 自學的訓練

## 學員必須自己有學習動機
## 能消化中英文資料
## 從中體會學習的意義


</t>
<t tx="yen.20161011122601.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011122601.2"># 自學 Python3

[Python3 程式範例](https://github.com/mdecourse/2016fallcp/blob/master/python3program.py)
### 在哪裡執行?
### 如何執行?
### 如何寫心得?
### 如何錄製操作過程?
</t>
<t tx="yen.20161011122932.1">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20161011122957.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011122957.2"># 在哪裡執行?

### 單機操作系統中 (近端)
### 單機連結到遠端主機中 (遠端)
### 瀏覽器中 (網際端)
</t>
<t tx="yen.20161011123951.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011123951.2"># Python 解譯器

CPython: https://www.python.org/

(Anaconda: https://www.continuum.io/downloads)
    
IronPython (.NET): http://ironpython.net/

Jython (Java): http://www.jython.org/

Pypy (Python): http://pypy.org/

Brython (Javascript): https://www.brython.info/
</t>
<t tx="yen.20161011124118.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011124118.2"># Python 2 或 3?

### 業界大部份仍以 2.7 版為主
但是, 若沒有特別約束
### 建議直接學習 Python3
</t>
<t tx="yen.20161011125115.1">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20161011125115.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011125115.3"># 課程分組排座位

* 想像一下分組流程
* 請畫出流程圖
* 如何進行最好?
</t>
<t tx="yen.20161011143808.1">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20161011143808.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011143808.3"># Github 倉儲網頁

####建立個人 Github 網頁 (帳號.github.io)
####建立個人課程作業網頁 (納入投影片與網誌架構)
####組長建立分組的評量網頁 (納入投影片與網誌架構)
</t>
<t tx="yen.20161011144113.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011144113.2"># 學員作業網頁定版

###個人作業網頁內容可以隨時改版
###分組評量網頁必須在指定時間前定版
###Github 倉儲 gh-pages分支與子模組應用
</t>
<t tx="yen.20161011144715.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011144715.2"># Github 倉儲拉回請求

####分組倉儲 Collaborators 設定
####分組倉儲版本 Pull Requests 練習
####各組員實際操作影片錄製
####操作影片加字幕以及影片檔相加
</t>
<t tx="yen.20161011145156.1">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20161011145156.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011145156.3"># Python3 語法

####print()
####input()
####變數名稱與關鍵字
</t>
<t tx="yen.20161011145156.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011145156.5"># for 迴圈用法

###Python 程式縮排
###for i in range(5)：
###數列與 iterator

</t>
<t tx="yen.20161011145156.6">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011145156.7"># 函式用法

####函式定義
####函式呼叫與傳值
####函式載入順序
</t>
<t tx="yen.20161011145755.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011145755.2"># 數列用法

####數列與索引
####數列與字串
####數列排序
</t>
<t tx="yen.20161011145952.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011145952.2"># 分組程式內容

####讀取原始資料內容
####設法分割資料, 納入數列
####根據設計邏輯進行資料處理
</t>
<t tx="yen.20161011150126.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011150126.2"># Python 網際繪圖

####Brython 簡介
####Brython 執行設定
####基本繪圖練習 (五芒星、正齒輪與各國國旗)
</t>
<t tx="yen.20161011150316.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011150316.2"># 遊戲邏輯

####1-100 中隨機取一個數字作為答案
####設法讓使用者猜這個數字 (接受輸入)
####使用每猜一次都回答比答案大或小
####能在一定次數中猜對者獲勝
####在單機或網際執行程式?
</t>
<t tx="yen.20161011150901.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011150901.2"># 網際動畫範例

####機構模擬
####猜顏色遊戲
####網際對戰遊戲
</t>
<t tx="yen.20161011155543.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161011155543.2"># 計算機程式在教什麼?

## &lt;span style="color:#FFFF00"&gt;創造力&lt;/span&gt;&lt;small&gt;=自學力+程式力+想像力&lt;/small&gt;
## &lt;span style="color:#FFFF00"&gt;表達力&lt;/span&gt;&lt;small&gt;=口語+文字+2D+3D+理論+實體&lt;/small&gt;
&lt;span style="color:#00FF80"&gt;以及&lt;/span&gt;
## &lt;span style="color:#FFFF00"&gt;協同力&lt;/span&gt;&lt;small&gt;=電腦+網路+工具+專案&lt;/small&gt;

</t>
<t tx="yen.20161016004633.1">&lt;section&gt;
@others
&lt;/section&gt;
</t>
<t tx="yen.20161016004633.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016004633.5"># 計算機程式課程規劃

## [課程規劃](https://github.com/mdecourse/2016fallcp/blob/master/syllabus.py)
## [課程 Wiki](https://github.com/mdecourse/2016fallcp/wiki)
## [課程網誌](http://chiamingyen.github.io/kmolab/blog/tag/2016fallcp.html)

</t>
<t tx="yen.20161016010643.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016010643.2">## 下載 miniconda 可攜環境

  * 在電腦教室下載 [mini2016fall.7z](http://140.130.17.17/public/2016fall/mini2016fall_with_leo.7z)
  * 從外部下載 [mini2016fall.7z](https://140.130.17.101/download/?filepath=/home/yen/cmsimply/wsgi/local_data/downloads/mini2016fall_with_leo.7z)
  * start.bat 啟動, stop.bat 關閉
  * 建議存在隨身硬碟中使用


</t>
<t tx="yen.20161016010719.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016011920.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016011920.2"># 計算機程式專題

* 如何進行上課分組與排座位?
* 如何寫一個猜數字遊戲?
* 如何繪製 2D 靜態圖?
* 如何製作一個簡單的網際遊戲?
</t>
<t tx="yen.20161016012215.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016012215.2"># 猜數字遊戲

* 單機執行還是瀏覽器執行?
* 請畫出流程圖
* 有沒有參考資料?
</t>
<t tx="yen.20161016012253.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016012253.2"># 2D 繪圖

* 單機執行還是瀏覽器執行?
* 請畫出流程圖
* 有沒有參考資料?
</t>
<t tx="yen.20161016012402.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016012402.2"># 網際遊戲

* 單機執行還是瀏覽器執行?
* 請畫出流程圖
* 有沒有參考資料?
</t>
<t tx="yen.20161016012809.1">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20161016012809.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20161016012809.3"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="yen.20161016012809.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20161016012809.5">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="yen.20161016012809.6">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016012809.7">## 使用 iframe 導入影片

### 導入影片 template

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="yen.20161016012922.1">## 學員自評項目

* 上課筆記與心得寫在個人的 2016fallcp_hw 倉儲 Wiki 中
* 利用 [ShareX](https://getsharex.com/) 錄製上課操作練習影片
* 將影片加上說明字幕後, 上傳至個人 [Vimeo](https://vimeo.com/) 與 [Youtube](https://www.youtube.com)
* 每週更新個人與分組的 Github Pages 投影片與網誌</t>
<t tx="yen.20161016023122.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016023122.2"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)

</t>
<t tx="yen.20161022111056.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20161022151749.1">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
</tnodes>
</leo_file>
